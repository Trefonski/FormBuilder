{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/js/app.js","webpack:///./src/scss/style.scss"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;AClFA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,oBAAoB;AAC9F,oEAAoE,iBAAiB;AACrF,0EAA0E,iBAAiB;AAC3F,wEAAwE,iBAAiB;AACzF,gEAAgE,iBAAiB;AACjF,0EAA0E,iBAAiB;AAC3F,kFAAkF,iBAAiB;AACnG;AACA;AACA;AACA;AACA,qB;AACA;AACA;AACA;AACA;AACA,8E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2C;AACA;AACA;AACA;AACA;AACA;AACA,iC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,iBAAiB;AACvD;AACA;AACA;AACA;;AAEA;AACA,qB;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,kCAAkC,iBAAiB;AACnD;AACA;AACA;;;;AAIA;AACA,iB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,eAAe;AACjD;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB;AACA,wHAAwH;AACxH,yBAAyB;AACzB,wHAAwH;AACxH,yBAAyB;AACzB,iIAAiI;AACjI;;AAEA,qBAAqB;AACrB;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qB;;;;;;;;;;;AC9WA,uC","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","require('../scss/style.scss')\r\n\r\n\r\nvar app = app || {};\r\n            app.db = '';\r\n            app.counter = 0;\r\n            app.condtype;\r\n            var ElementFrame = ElementFrame || {};\r\n            ElementFrame.SelectType = '<select><option value=\"1\">Text</option><option value=\"2\">Number</option><option value=\"3\">Yes/NO</option></select>';\r\n            ElementFrame.QuestionLabel = '<label>Question</label>';\r\n            ElementFrame.ConditionLabel = '<label>Condition</label>';\r\n            ElementFrame.TypeLabel = '<label>Type</label>';\r\n            ElementFrame.Buttons = '<button class=\"nav-right\"';\r\n            ElementFrame.SelectConditionType = '<select><option value=\"1\">Text</option><option value=\"2\">Number</option><option value=\"3\">Yes/NO</option></select>';\r\n            var Inputs = [];\r\n            \r\n            \r\n            function Input(number, parent, InputType, Condition, ConditionType){\r\n                this.number = number;\r\n                this.parent = parent;\r\n                this.InputType = InputType;\r\n                this.question = '';\r\n                this.type = 1;\r\n                this.Condition = '';\r\n                this.ConditionType = 1;\r\n            }\r\n            function openDB(){\r\n                var DBOpenRequest = window.indexedDB.open('inputs', 8);\r\n                DBOpenRequest.onerror = function(){\r\n                    alert('Error while opening database! '+ event.target.errorCode);\r\n                }\r\n                DBOpenRequest.onsuccess = function(){\r\n                    console.log('success');\r\n                    app.db = DBOpenRequest.result;\r\n                    console.log(app.db);\r\n                    display();\r\n                };\r\n                DBOpenRequest.onupgradeneeded = function(event){\r\n                    if(event.oldVersion < 6){\r\n                        app.db = DBOpenRequest.result;\r\n                        var db = app.db;\r\n                        var objectStore = db.createObjectStore('inputs', { keyPath: 'number' } );\r\n                        objectStore.createIndex('parent','parent', { unique : false } );\r\n                        objectStore.createIndex('InputType','InputType', { unique : false } );\r\n                        objectStore.createIndex('question','question', { unique : false } );\r\n                        objectStore.createIndex('type','type', { unique : false } );\r\n                        objectStore.createIndex('Condition','Condition', { unique : false } );\r\n                        objectStore.createIndex('ConditionType','ConditionType', { unique : false } );\r\n                    }\r\n                    var db = event.target.result;\r\n                    db.onerror = function(event){\r\n                        alert('error');\r\n                    }  \r\n                }\r\n            }\r\n            Input.prototype.Create = function(){\r\n                var number = app.counter;\r\n                var transaction = app.db.transaction(['inputs'], 'readwrite');           \r\n                transaction.oncomplete = function(event){\r\n                    console.log('transaction completed');\r\n                }\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var objectStoreRequest = objectstore.add(Inputs[app.counter]);\r\n                dsp(number, this);\r\n            }\r\n            \r\n            function AddInput(){\r\n                var transaction = app.db.transaction(['inputs'], 'readwrite');\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var requestSecond = objectstore.getAll();\r\n                requestSecond.onsuccess = function(){\r\n                    var objCnt = requestSecond.result.length;\r\n                    if(objCnt> 1){\r\n                        app.counter = requestSecond.result[objCnt-1].number;\r\n                        console.log(app.counter);\r\n                    }\r\n                }\r\n                app.counter++;\r\n                parent = 'form';\r\n                InputType = 'normal';\r\n                Inputs[app.counter] = new Input(app.counter, parent, InputType);\r\n                Inputs[app.counter].Create();\r\n                \r\n            }\r\n            \r\n            function AddSubInput(parent){\r\n                var transaction = app.db.transaction(['inputs'], 'readwrite');\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var requestSecond = objectstore.getAll();\r\n                requestSecond.onsuccess = function(){\r\n                    var cus = requestSecond.result.length;\r\n                    console.log(cus);\r\n                    console.log(request2.result);\r\n                    app.counter = request2.result[cus-1].number;\r\n                    console.log(app.counter);\r\n                    app.counter++;\r\n                InputType = 'sub';\r\n                Inputs[app.counter] = new Input(app.counter, parent.id, InputType);\r\n                Inputs[app.counter].Create();\r\n                }  \r\n            }\r\n            \r\n            function DeleteInput(identifier){\r\n                var objId = identifier.id;\r\n                var objNum = objId.split('_');\r\n                console.log(objNum[1]);\r\n                var element = document.getElementById(objId);\r\n                element.parentNode.removeChild(element);\r\n                var transaction = app.db.transaction(['inputs'], 'readwrite');\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var delObj = objectstore.delete(parseInt(lel[1]));\r\n                function sth(z, data, noo){                  \r\n                    if(data[z].parent == noo){\r\n                        var lel2 = data[z].number;\r\n                        noo = 'sub_'+data[z].number;\r\n                        console.log(noo);\r\n                        var del2 = objectstore.delete(parseInt(lel2));\r\n                        uhh(noo);           \r\n                    }\r\n                }\r\n                var noo = identifier.id;\r\n                console.log(noo);\r\n                uhh(noo);\r\n                function uhh(noo){\r\n                    var request = objectstore.getAll();\r\n                    request.onsuccess = function(){\r\n                        console.log(request.result);\r\n                        app.counter = request.result.length;\r\n                        \r\n                        var data = request.result;\r\n                    \r\n                        console.log(data.length);\r\n                    \r\n                        for(var z = 0; z < data.length; z++){\r\n                            console.log(data[z].number);\r\n                            console.log(data[z].parent);\r\n                            console.log(noo);\r\n                        sth(z, data, noo);\r\n                \r\n                        }\r\n                    } \r\n                    \r\n                    \r\n                }\r\n                \r\n            }\r\n            \r\n            function display(){\r\n                var db = app.db;\r\n                console.log(app.db);\r\n                var transaction = db.transaction(['inputs'], 'readonly');\r\n                console.log(transaction);\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var request = objectstore.getAll();\r\n                request.onsuccess = function(){\r\n                    console.log(request.result);\r\n                    app.counter = request.result.length;\r\n                    \r\n                    var data = request.result;\r\n                    \r\n                    console.log(data.length);\r\n                    for(var z = 0; z < data.length; z++){\r\n                        var number = parseInt(data[z].number);\r\n                        console.log(number);\r\n                        dsp(number, data[z]);\r\n                        \r\n          \r\n                        \r\n                    }\r\n                }                \r\n            }\r\n            \r\n            function UpdateQuestion(number){\r\n                console.log(number);\r\n                var transaction = app.db.transaction(['inputs'], 'readwrite');\r\n                var f = event.target.value;\r\n                console.log(event.target.value);\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var objectStoreRequest = objectstore.get(number);\r\n                objectStoreRequest.onsuccess = function(){\r\n                    var x = objectStoreRequest.result;\r\n                    x.question = f;\r\n                    var update = objectstore.put(x);\r\n                }\r\n            }\r\n            function UpdateSelect(select, number){\r\n                var transaction = app.db.transaction(['inputs'], 'readwrite');\r\n                var f = select.value;\r\n                console.log(event.target.value);\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var objectStoreRequest = objectstore.get(number);\r\n                objectStoreRequest.onsuccess = function(){\r\n                    var x = objectStoreRequest.result;\r\n                    console.log(f);\r\n                    var pp = x.parent;\r\n                    console.log(number);\r\n                    x.type = parseInt(f);\r\n                    if(x.InputType == \"normal\"){\r\n                       var xc = document.getElementById(\"input_\"+number);\r\n                    }else{\r\n                        var xc = document.getElementById(\"sub_\"+number);\r\n                    }\r\n                    console.log(xc);\r\n                    var cc = xc.childNodes;\r\n                    console.log(cc);\r\n                    console.log(cc.length);\r\n                    var update = objectstore.put(x);\r\n                    for(var j = 1; j < cc.length;j++){\r\n                        var zz = cc[j];\r\n                        var l = zz.id;\r\n                        var kh = l.split('_');\r\n\r\n                        var removeOldSelect = document.getElementById(l).getElementsByTagName('div')[0];\r\n                        removeOldSelect.removeChild(removeOldSelect.childNodes[0]);\r\n                        var objectStoreRequestSecond = objectstore.get(parseInt(kh[1]));\r\n                        objectStoreRequestSecond.onsuccess = function(){\r\n                            console.log(objectStoreRequestSecond.result);\r\n                            var override = objectStoreRequestSecond.result;\r\n                            override.Condition = \"\";\r\n                            override.ConditionType = 1;\r\n                            var update = objectstore.put(override);\r\n                            UpdateConditionType(kh[1],  number);\r\n                        }\r\n                        //UpdateConditionType(kh[1],  number);\r\n                    }\r\n                    \r\n                }\r\n            }\r\n            function UpdateCondition(number){\r\n                console.log(number);\r\n                var transaction = app.db.transaction(['inputs'], 'readwrite');\r\n                var f = event.target.value;\r\n                console.log(event.target.value);\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var objectStoreRequest = objectstore.get(number);\r\n                objectStoreRequest.onsuccess = function(){\r\n                    var x = objectStoreRequest.result;\r\n                    x.Condition = f;\r\n                    var update = objectstore.put(x);\r\n                }\r\n            }\r\n            function UpdateConditionYN(select, number){\r\n                var transaction = app.db.transaction(['inputs'], 'readwrite');\r\n                var f = select.value;\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var objectStoreRequest = objectstore.get(number);\r\n                objectStoreRequest.onsuccess = function(){\r\n                    var x = objectStoreRequest.result;\r\n                    x.Condition = parseInt(f);\r\n                    var update = objectstore.put(x);\r\n                    \r\n                }\r\n            }\r\n            function UpdateConditionType(l, parentNumber){\r\n                \r\n                console.log(parentNumber);\r\n                var transaction = app.db.transaction(['inputs'], 'readonly');\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var objectStoreRequest = objectstore.get(parseInt(parentNumber));\r\n                objectStoreRequest.onsuccess = function(){\r\n                    var hm = '<p><label>Condition</label><span>';\r\n                    var ct = objectStoreRequest.result.type;\r\n                    var objectStoreRequestSecond = objectstore.get(parseInt(l));\r\n                    \r\n                    objectStoreRequestSecond.onsuccess = function(){\r\n                        var cs = objectStoreRequestSecond.result.ConditionType;\r\n                        var dspCond = objectStoreRequestSecond.result.Condition;\r\n                        console.log(cs);\r\n                        if(ct==2){\r\n                        hm += '<input type=\"number\" onfocusout=\"UpdateCondition('+l+')\" value=\"'+dspCond+'\"></select><select onchange=\"saveConditionType(this, '+l+')\">';\r\n                        switch(parseInt(cs)){\r\n                            case 1:\r\n                                hm += '<option value=\"1\" selected>Equals</option><option value=\"2\">Greater than</option><option value=\"3\">Less than</option>';\r\n                                break;\r\n                            case 2:\r\n                                hm += '<option value=\"1\" selected>Equals</option><option value=\"2\" selected>Greater than</option><option value=\"3\">Less than</option>';\r\n                                break;\r\n                            case 3:\r\n                                hm += '<option value=\"1\">Equals</option><option value=\"2\">Greater than</option><option value=\"3\"  selected>Less than</option>';\r\n                                break;\r\n                        }\r\n                        \r\n                    }else if(ct==3){\r\n                        if(dspCond == 2){\r\n                            hm+='<select onchange=\"UpdateConditionYN(this, '+l+')\"><option disabled style=\"display:none;\"></option><option value=\"1\" selected>Yes</option><option value=\"2\">No</option></select><select><option>Equals</option></select>';\r\n                        }else if(dspCond == 1){\r\n                            hm+='<select onchange=\"UpdateConditionYN(this, '+l+')\"><option disabled style=\"display:none;\"></option><option value=\"1\">Yes</option><option value=\"2\" selected>No</option></select><select><option>Equals</option></select>';\r\n                        }else{\r\n                            hm+='<select onchange=\"UpdateConditionYN(this, '+l+')\"><option disabled selected style=\"display:none;\"></option><option value=\"1\">Yes</option><option value=\"2\">No</option></select><select><option>Equals</option></select>';\r\n                        }\r\n                        \r\n                    }else{\r\n                        hm += '<input onfocusout=\"UpdateCondition('+l+')\"  value=\"'+dspCond+'\"><select><option>Equals</option></select></span></p>';\r\n                    }\r\n                    \r\n                    var p = 'sub_'+l;\r\n                    console.log(ct);\r\n                    \r\n                    document.getElementById(p).getElementsByTagName('div')[0].insertAdjacentHTML('afterbegin',hm);\r\n                    }\r\n                    \r\n                    \r\n                }\r\n                console.log(app.condtype);\r\n                \r\n            }\r\n            \r\n            function saveConditionType(select, num){\r\n                var transaction = app.db.transaction(['inputs'], 'readwrite');\r\n                var objectstore = transaction.objectStore('inputs');\r\n                var objectStoreRequest = objectstore.get(parseInt(num));\r\n                objectStoreRequest.onsuccess = function(){\r\n                    var request = objectStoreRequest.result;\r\n                    request.ConditionType = select.value;\r\n                    console.log(request.ConditionType);\r\n                    var update = objectstore.put(request);\r\n                }\r\n            }\r\n            \r\n            function reset(){\r\n                var transaction = app.db.transaction(['inputs'], 'readwrite');\r\n                transaction.oncomplete = function(event){\r\n                    var objectstore = transaction.objectStore('inputs');\r\n                    var objectStoreRequest = objectstore.clear();\r\n                    objectStoreRequest.onsuccess = function(){\r\n                        alert('Form has been cleared.');\r\n                    }\r\n                    document.getElementById('form').innerHTML = '';\r\n                }   \r\n            }\r\n            function dsp(number, data){\r\n                if(number >= app.counter){\r\n                    app.counter = number;\r\n                    console.log(number);\r\n                }\r\n                        console.log(data);\r\n                        var is = '';\r\n                \r\n                        if(data.InputType == \"normal\"){\r\n                            var tag = 'input_'+number;\r\n                        }else if(data.InputType == \"sub\"){\r\n                            var tag = 'sub_'+number;\r\n                            var p = data.parent;\r\n                            var l = p.split('_');\r\n                            \r\n                            UpdateConditionType(number, l[1]);\r\n                            console.log(app.condtype);\r\n                        }\r\n                        is += '<p>'+ElementFrame.QuestionLabel+'<input onfocusout=\"UpdateQuestion('+number+')\" value=\"'+data.question+'\"></p>';\r\n                        is += '<p>'+ElementFrame.TypeLabel;\r\n                        is += '<select onchange=\"UpdateSelect(this, '+number+')\">';\r\n                        switch(data.type){\r\n                            case 1: \r\n                                is += '<option value=\"1\" selected>Text</option><option value=\"2\">Number</option><option value=\"3\">Yes/NO</option>';\r\n                                break;\r\n                            case 2:\r\n                                is += '<option value=\"1\">Text</option><option value=\"2\" selected>Number</option><option value=\"3\">Yes/NO</option>';\r\n                                break;\r\n                            case 3:\r\n                                is += '<option value=\"1\">Text</option><option value=\"2\">Number</option><option value=\"3\" selected>Yes/NO</option>';\r\n                                break;\r\n                        }\r\n                        is += '</select>';\r\n                        var element = '<div class=\"block\" id=\"'+tag+'\"><div class=\"x\">'+is+'</p>'+ElementFrame.Buttons+'onclick=\"AddSubInput('+tag+')\">Add Sub-Input</button>'+ElementFrame.Buttons+' onclick=\"DeleteInput('+tag+')\">Delete</button></div></div>';\r\n                        document.getElementById(data.parent).insertAdjacentHTML('beforeend',element);\r\n            }\r\n            openDB();","// extracted by mini-css-extract-plugin"],"sourceRoot":""}